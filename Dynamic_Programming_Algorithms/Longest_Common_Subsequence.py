"""
Задача о наибольшей общей подпоследовательности (Longest Common Subsequence) – это классическая задача динамического
программирования, которая заключается в нахождении наибольшей общей подпоследовательности (не обязательно подстроки)
у двух последовательностей.

Основные шаги решения задачи о наибольшей общей подпоследовательности:
1) Формулировка: Определите две последовательности, для которых нужно найти наибольшую общую подпоследовательность.
2) Динамическое программирование: Используйте таблицу для хранения промежуточных результатов и заполните ее
соответствующим образом.
3) Восстановление ответа: На основе заполненной таблицы определите наибольшую общую подпоследовательность.
"""


def longest_common_subsequence(str1, str2):
    m = len(str1)
    n = len(str2)

    dp = [[0] * (n + 1) for _ in range(m + 1)]

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if str1[i - 1] == str2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

    result = ""
    i, j = m, n
    while i > 0 and j > 0:
        if str1[i - 1] == str2[j - 1]:
            result = str1[i - 1] + result
            i -= 1
            j -= 1
        elif dp[i - 1][j] > dp[i][j - 1]:
            i -= 1
        else:
            j -= 1

    return dp[m][n], result


# Пример использования
str1 = "ABCBDAB"
str2 = "BDCAB"
length, common_subsequence = longest_common_subsequence(str1, str2)
print("Длина наибольшей общей подпоследовательности:", length)
print("Наибольшая общая подпоследовательность:", common_subsequence)

"""
Задача о наибольшей общей подпоследовательности широко используется в биоинформатике, обработке текста, 
сравнении последовательностей и других областях, где требуется сравнение последовательностей данных.
"""
