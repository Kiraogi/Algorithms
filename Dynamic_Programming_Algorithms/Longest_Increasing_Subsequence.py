"""
Задача о наибольшем возрастающем подпоследовательстве (Longest Increasing Subsequence) заключается в нахождении
подпоследовательности элементов в последовательности, которая является строго возрастающей и имеет максимальную длину.

Основные шаги решения задачи о наибольшем возрастающем подпоследовательстве:
1) Формулировка: Определите последовательность элементов, для которой нужно найти наибольшее возрастающее
подпоследовательство.
2) Динамическое программирование: Используйте таблицу для хранения промежуточных результатов и заполните ее
соответствующим образом.
3) Восстановление ответа: На основе заполненной таблицы определите наибольшее возрастающее подпоследовательство.
"""


def longest_increasing_subsequence(nums):
    if not nums:
        return 0, []

    n = len(nums)
    dp = [1] * n
    prev_indices = [-1] * n

    for i in range(1, n):
        for j in range(i):
            if nums[i] > nums[j]:
                if dp[j] + 1 > dp[i]:
                    dp[i] = dp[j] + 1
                    prev_indices[i] = j

    max_length = max(dp)
    end_index = dp.index(max_length)

    result = []
    while end_index != -1:
        result.insert(0, nums[end_index])
        end_index = prev_indices[end_index]

    return max_length, result


# Пример использования
nums = [10, 22, 9, 33, 21, 50, 41, 60, 80]
length, increasing_subsequence = longest_increasing_subsequence(nums)
print("Длина наибольшего возрастающего подпоследовательства:", length)
print("Наибольшее возрастающее подпоследовательство:", increasing_subsequence)

"""
Задача о наибольшем возрастающем подпоследовательстве имеет много практических применений, таких как оптимизация 
порядка выполнения задач, поиск оптимальных путей и другие задачи, где требуется нахождение наилучшей 
последовательности элементов.
"""
