"""
Поиск в ширину (Breadth-First Search, BFS) – это алгоритм обхода или поиска в структурах данных, таких как деревья
и графы. Основная идея алгоритма состоит в том, чтобы идти вперед по всем вершинам на одном уровне, прежде чем
переходить к вершинам следующего уровня. Это можно сделать с использованием очереди.

Для графа алгоритм BFS включает в себя следующие шаги:
1) Добавьте начальную вершину в очередь и пометьте ее как посещенную.
2) Пока очередь не пуста, выполните следующие шаги:
    *Извлеките вершину из начала очереди.
    *Посетите все непосещенные смежные вершины этой вершины и поместите их в конец очереди.
3) Повторите шаги 2 до тех пор, пока все вершины не будут посещены.
"""

# Определяем граф в виде словаря списков смежности
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}


def bfs(graph, start):
    visited = set()
    queue = [start]
    while queue:
        vertex = queue.pop(0)
        if vertex not in visited:
            visited.add(vertex)
            print(vertex)  # Посещаем вершину
            # Добавляем все непосещенные смежные вершины в очередь
            for next_vertex in graph[vertex]:
                queue.append(next_vertex)
    return visited


# Вызов функции и начало обхода с вершины 'A'
bfs(graph, 'A')

"""
В данном примере queue — это очередь (list), в которую помещаются вершины для посещения. visited — это множество (set), 
которое содержит посещенные вершины, гарантируя, что вершины не будут посещены более одного раза.

BFS часто используется для поиска кратчайшего пути в графе или дереве, нахождения компоненты связности, обнаружения 
циклов в графе и многих других задачах.
"""