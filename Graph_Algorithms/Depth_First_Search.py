"""Поиск в глубину (Depth-First Search, DFS) – это алгоритм обхода или поиска в структурах данных, таких как деревья
и графы. Основная идея алгоритма состоит в том, чтобы идти вперед по одной ветви структуры данных до самого конца,
прежде чем отступать и следовать другим путям. Это можно сделать с использованием рекурсии или стека.

Для графа алгоритм DFS включает в себя следующие шаги:
1) Выберите начальную вершину и пометьте её как посещенную.
2)Посетите не посещенную смежную вершину, пометьте её и продолжайте этот процесс.
3)Если из текущей вершины нет выхода к не посещенной вершине, выполните шаг назад (отступите)
и проверьте другие смежные вершины.
4)Повторите шаги 2 и 3 до тех пор, пока все вершины не будут посещены.
"""
# Определяем граф в виде словаря списков смежности
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}


def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()
    visited.add(start)
    print(start)  # Посещаем вершину
    # Рекурсивно посещаем все смежные и еще не посещенные вершины
    for next_vertex in graph[start]:
        if next_vertex not in visited:
            dfs(graph, next_vertex, visited)
    return visited


# Вызов функции и начало обхода с вершины 'A'
dfs(graph, 'A')

"""
В данном примере visited — это множество (set), которое содержит посещенные вершины, гарантируя, что вершины не будут 
посещены более одного раза.

DFS часто используется в задачах, связанных с поиском пути, проверкой наличия цикла, топологической сортировкой 
в направленных ациклических графах (DAG) и многих других.
"""
