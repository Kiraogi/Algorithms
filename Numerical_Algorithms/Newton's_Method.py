"""
Метод Ньютона (также известный как метод Ньютона-Рафсона) — это мощный алгоритм численного нахождения приближений
корней (или нулей) вещественной функции. Основная идея метода заключается в использовании касательных для приближения
к корню функции.

Вот как работает метод Ньютона:
1) Выберите начальное приближение ( x_0 ) для корня функции ( f(x) ).
2) Используйте формулу ( x_{n+1} = x_n - \frac{f(x_n)}{f'(x_n)} ) для вычисления последовательных
приближений ( x_{n+1} ), где ( f'(x) ) — производная функции ( f(x) ).
3) Продолжайте итерационный процесс, пока не будет достигнута приемлемая точность.
Ниже приведен пример реализации метода Ньютона на Python для нахождения квадратного корня числа
(корень функции ( f(x) = x^2 - S ), где ( S ) — число, квадратный корень которого мы хотим найти):
"""


def newtons_method_sqrt(S, initial_guess=1.0, tolerance=1e-10):
    x_n = initial_guess
    while True:
        # Вычисляем значение функции и её производной
        f_x_n = x_n ** 2 - S
        f_prime_x_n = 2 * x_n

        # Вычисляем следующее приближение
        next_x_n = x_n - f_x_n / f_prime_x_n

        # Проверяем, достаточно ли близки друг к другу два последовательных приближения
        if abs(next_x_n - x_n) < tolerance:
            return next_x_n

        # Обновляем приближение
        x_n = next_x_n


# Пример использования функции:
approximation = newtons_method_sqrt(25)
print("Приближенное значение квадратного корня из 25:", approximation)

"""
Метод Ньютона сходится очень быстро, особенно если начальное приближение близко к истинному корню функции, 
но он может не сойтись, если функция не соответствует определенным критериям (например, если производная в некоторой 
точке обращается в ноль или если начальное приближение сильно отдалено от корня).
"""