"""
Бинарный поиск — это эффективный алгоритм поиска, который используется для нахождения позиции элемента в отсортированном
массиве. Алгоритм работает на принципе деления пополам: он сравнивает искомый элемент с элементом в середине массива и,
в зависимости от результата, продолжает поиск в левой или правой половине массива.

Шаги бинарного поиска:
1) Найти средний индекс массива.
2) Сравнить элемент по среднему индексу с искомым значением.
3) Если элемент совпадает с искомым, вернуть его индекс.
4) Если искомое значение меньше, продолжить поиск в левой половине.
5) Если искомое значение больше, продолжить поиск в правой половине.
6) Повторять шаги до тех пор, пока не будет найден элемент или до тех пор, пока не останется элементов для проверки.
"""


def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid  # Элемент найден
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1  # Элемент не найден


# Пример использования
sorted_array = [1, 3, 5, 7, 9, 11]
target = 7

result = binary_search(sorted_array, target)
if result != -1:
    print(f"Элемент найден на позиции: {result}")
else:
    print("Элемент в массиве не найден.")

"""
Бинарный поиск значительно быстрее линейного поиска для больших массивов, так как каждый шаг алгоритма уменьшает область 
поиска вдвое. Временная сложность бинарного поиска в худшем случае составляет O(log n), 
где n — количество элементов в массиве.

Важно отметить, что бинарный поиск можно использовать только в случае, если массив отсортирован. 
Если массив не отсортирован, необходимо сначала отсортировать его, что вносит дополнительные затраты времени.
"""
