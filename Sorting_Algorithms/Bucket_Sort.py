"""
Bucket Sort — это алгоритм сортировки, который делит элементы массива на несколько "корзин" (bucket),
сортирует каждую корзину отдельно (обычно другим алгоритмом сортировки, например, сортировкой вставками),
а затем объединяет все корзины в итоговый отсортированный массив.

Алгоритм:
1) Разбить массив на несколько корзин (обычно диапазон элементов каждой корзины определяется на основе минимального и максимального значения в массиве).
2) Вставить каждый элемент массива в соответствующую корзину.
3) Отсортировать каждую корзину отдельно.
4) Объединить все отсортированные корзины в один массив.

Пример:
Рассмотрим массив [0.78, 0.17, 0.39, 0.26, 0.72, 0.94, 0.21, 0.12, 0.23, 0.68].

Шаг 1:
Создаём 5 корзин для значений от 0 до 1.

Шаг 2:
Распределяем элементы по корзинам:
[0.12, 0.17, 0.21, 0.23, 0.26]
[0.39]
[0.68, 0.72]
[0.78]
[0.94]

Шаг 3:
Сортируем каждую корзину: (для упрощения, сортировка вставками).

Шаг 4:
Объединяем корзины:
Итоговый массив: [0.12, 0.17, 0.21, 0.23, 0.26, 0.39, 0.68, 0.72, 0.78, 0.94].
"""


def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key


def bucket_sort(arr):
    bucket_count = len(arr)
    buckets = [[] for _ in range(bucket_count)]

    for num in arr:
        index = int(num * bucket_count)
        buckets[index].append(num)

    for bucket in buckets:
        insertion_sort(bucket)

    result = []
    for bucket in buckets:
        result.extend(bucket)

    return result


arr = [0.78, 0.17, 0.39, 0.26, 0.72, 0.94, 0.21, 0.12, 0.23, 0.68]
sorted_arr = bucket_sort(arr)
print(sorted_arr)

"""Bucket Sort наиболее подходит для распределения чисел в определённом диапазоне, таких как дробные числа, 
равномерно распределённые в диапазоне от 0 до 1."""