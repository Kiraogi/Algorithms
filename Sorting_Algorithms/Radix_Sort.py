"""Описание:
Radix Sort — это не сравнительный алгоритм сортировки, который сортирует числа поразрядно, начиная с младшего разряда и
заканчивая старшим. Он использует другую сортировку, такую как Counting Sort, как подалгоритм.

Алгоритм:
Определите максимальное количество цифр в наибольшем числе.
Для каждой цифры (разряда), начиная с младшего и заканчивая старшим:
Примените стабильный алгоритм сортировки (например, Counting Sort) к текущему разряду.
Пример:
Рассмотрим сортировку массива [170, 45, 75, 90, 802, 24, 2, 66].

Шаг 1: Сортировка по единицам:
Входной массив: [170, 45, 75, 90, 802, 24, 2, 66]
Сортируем по единицам: [170, 90, 802, 2, 24, 45, 75, 66]

Шаг 2: Сортировка по десяткам:
Входной массив: [170, 90, 802, 2, 24, 45, 75, 66]
Сортируем по десяткам: [802, 2, 24, 45, 66, 170, 75, 90]

Шаг 3: Сортировка по сотням:
Входной массив: [802, 2, 24, 45, 66, 170, 75, 90]
Сортируем по сотням: [2, 24, 45, 66, 75, 90, 170, 802]

Итоговый отсортированный массив:
[2, 24, 45, 66, 75, 90, 170, 802]
"""


def counting_sort(arr, exp):
    n = len(arr)
    output = [0] * n
    count = [0] * 10

    for i in range(n):
        index = arr[i] // exp
        count[index % 10] += 1

    for i in range(1, 10):
        count[i] += count[i - 1]

    i = n - 1
    while i >= 0:
        index = arr[i] // exp
        output[count[index % 10] - 1] = arr[i]
        count[index % 10] -= 1
        i -= 1

    for i in range(n):
        arr[i] = output[i]


def radix_sort(arr):
    max1 = max(arr)
    exp = 1
    while max1 // exp > 0:
        counting_sort(arr, exp)
        exp *= 10


arr = [170, 45, 75, 90, 802, 24, 2, 66]
radix_sort(arr)
print(arr)
