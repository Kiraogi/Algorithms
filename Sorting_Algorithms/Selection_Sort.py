"""
Сортировка выбором (Selection Sort) — это алгоритм сортировки на месте, который разделяет входной массив на две части:
отсортированную часть находится слева, а неотсортированную — справа.
На каждом шаге алгоритма он ищет минимальный (для сортировки по возрастанию) или максимальный
(для сортировки по убыванию) элемент в неотсортированной части массива,
и переносит этот элемент в конец отсортированной части.

Алгоритм работает следующим образом для сортировки по возрастанию:

1) Находим минимальный элемент в неотсортированной части массива.
2) Меняем местами этот минимальный элемент с первым элементом неотсортированной части.
3) Повторяем шаги 1 и 2 для оставшейся неотсортированной части массива до тех пор, пока не останется только один
последний (уже отсортированный) элемент.

Этапы сортировки выбором можно визуализировать следующим образом, если мы имеем массив [29, 10, 14, 37, 13]:
Исходный массив: [29, 10, 14, 37, 13]
[10, 29, 14, 37, 13] // 10 - минимальный элемент, меняем его с первым (29)
[10, 13, 14, 37, 29] // 13 - следующий минимальный элемент, меняем его со вторым (29)
[10, 13, 14, 37, 29] // 14 - уже находится на своем месте
[10, 13, 14, 29, 37] // 29 и 37 меняем местами, так как 29 меньше 37
[10, 13, 14, 29, 37] // Массив отсортирован
"""


def selection_sort(arr):
    for i in range(len(arr)):
        # Находим индекс минимального элемента в неотсортированной части
        min_index = i
        for j in range(i + 1, len(arr)):
            if arr[min_index] > arr[j]:
                min_index = j

        # Меняем местами найденный минимальный элемент с первым элементом в неотсортированной части
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr


# Тестирование функции сортировки
test_array = [29, 10, 14, 37, 13]
sorted_array = selection_sort(test_array)
print(sorted_array)

"""
Этот алгоритм имеет временную сложность O(n^2) в худшем, среднем и лучшем случаях, так как всегда выполняется 
двойной цикл независимо от расположения элементов. Сортировка выбором не является эффективной для больших наборов данных.

Преимущества:
* Простой и легко реализуемый.
* Работает хорошо для небольших массивов.

Недостатки:
* Медленный для больших массивов (O(n^2)).
* Неэффективен по сравнению с другими алгоритмами сортировки.
"""
